use actix_web::{
    body::MessageBody, dev::{ServiceRequest, ServiceResponse}, http::header::LOCATION, middleware::Next, FromRequest, HttpResponse
};
use uuid::Uuid;

use crate::session_state::TypedSession;

#[derive(Copy, Clone, Debug)]
pub struct UserId(Uuid);

pub async fn reject_anonymous_users(
    mut req: ServiceRequest,
    next: Next<impl MessageBody>,
) -> Result<ServiceResponse<impl MessageBody>, actix_web::Error> {
    let session = {
        let (http_request, payload) = req.parts_mut();
        TypedSession::from_request(http_request, payload).await
    }?;
    match session.get_user_id().map_err(actix_web::error::ErrorInternalServerError)? {
        Some(_) => next.call(req).await,
        None => {
            let response = see_other("/login");
            let e = anyhow::anyhow!("The user has not logged in");
            Err(actix_web::error::InternalError::from_response(e, response).into())
        }
    }
}

fn see_other(location: &str) -> HttpResponse {
    HttpResponse::SeeOther()
        .insert_header((LOCATION, location))
        .finish()
}
